module Unknown.Test exports (
    main,
)

import (std) Array
import (std) Effect (
    VoidEffect,
)
import (std) Maybe (
    Maybe(..),
)
import (std) String
import (std) StringMap

import Unknown (
    Unknown,
)


type alias Args = { log_success: (String) -> VoidEffect }

type TestResult =
    | Success(String)
    | Error(String)

main = fn (args: Args): Effect(Bool) -> do {
    errs <- Effect.for_each(
        tests,
        fn (result) ->
            match result with
            | Success(msg) ->
                args.log_success(msg)
                |> Effect.map(fn (_) -> Nothing)
            | Error(msg) ->
                args.log_success(msg)
                |> Effect.map(fn (_) -> Just(unit))
            end,
    );
    return errs
    |> Array.filter(fn (err) -> err)
    |> Array.is_empty
}

tests: Array(TestResult) = Array.concat(
    [
        typeof_tests,
        unknown_to_string_tests,
        unknown_to_int_tests,
        unknown_to_float_tests,
        unknown_to_bool_tests,
        unknown_to_array_tests,
        unknown_to_object_tests,
        unknown_to_null_tests,
        unknown_to_undefined_tests,
    ],
)

typeof_tests: Array(TestResult) =
    let
        assert = fn (got, want) ->
            if String.is_eq(got, want) then
                Success("Unknown.typeof: noice")
            else
                Error("Unknown.typeof: huh")
    in
    [
        assert(Unknown.typeof(unknown_string), "string"),
        assert(Unknown.typeof(unknown_int), "number"),
        assert(Unknown.typeof(unknown_float), "number"),
        assert(Unknown.typeof(unknown_true), "boolean"),
        assert(Unknown.typeof(unknown_false), "boolean"),
        assert(Unknown.typeof(unknown_empty_array), "object"),
        assert(Unknown.typeof(unknown_array), "object"),
        assert(Unknown.typeof(unknown_empty_object), "object"),
        assert(Unknown.typeof(unknown_object), "object"),
        assert(Unknown.typeof(unknown_null), "object"),
        assert(Unknown.typeof(unknown_undefined), "undefined"),
    ]

unknown_to_string_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_string(dunno) with
            | Just(_) -> Success("Unknown.to_string: noice")
            | Nothing -> Error("Unknown.to_string: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_string(dunno) with
            | Just(_) -> Error("Unknown.to_string: huh")
            | Nothing -> Success("Unknown.to_string: noice")
            end
    in
    [
        test_yeh(unknown_string),
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
    ]

unknown_to_int_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_int(dunno) with
            | Just(_) -> Success("Unknown.to_int: noice")
            | Nothing -> Error("Unknown.to_int: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_int(dunno) with
            | Just(_) -> Error("Unknown.to_int: huh")
            | Nothing -> Success("Unknown.to_int: noice")
            end
    in
    [
        test_yeh(unknown_int),
        test_nah(unknown_string),
        test_nah(unknown_float),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
    ]

unknown_to_float_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_float(dunno) with
            | Just(_) -> Success("Unknown.to_float: noice")
            | Nothing -> Error("Unknown.to_float: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_float(dunno) with
            | Just(_) -> Error("Unknown.to_float: huh")
            | Nothing -> Success("Unknown.to_float: noice")
            end
    in
    [
        test_yeh(unknown_int),
        test_yeh(unknown_float),
        test_nah(unknown_string),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
    ]

unknown_to_bool_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_bool(dunno) with
            | Just(_) -> Success("Unknown.to_bool: noice")
            | Nothing -> Error("Unknown.to_bool: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_bool(dunno) with
            | Just(_) -> Error("Unknown.to_bool: huh")
            | Nothing -> Success("Unknown.to_bool: noice")
            end
    in
    [
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_string),
        test_yeh(unknown_true),
        test_yeh(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
    ]

unknown_to_array_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_array(dunno) with
            | Just(_) -> Success("Unknown.to_array: noice")
            | Nothing -> Error("Unknown.to_array: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_array(dunno) with
            | Just(_) -> Error("Unknown.to_array: huh")
            | Nothing -> Success("Unknown.to_array: noice")
            end
    in
    [
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_string),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_yeh(unknown_empty_array),
        test_yeh(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
        -- make sure the empty array is actually empty
        match Unknown.to_array(unknown_empty_array) with
        | Just(array) ->
            if Array.is_empty(array) then
                Success("Unknown.to_array: noice")
            else
                Error("Unknown.to_array: oops")
        | Nothing -> Error("Unknown.to_array: oops")
        end,
        -- More elaborate array decoding example
        let
            result: Maybe({ x: Int, y: String, z: Bool }) =
                Unknown.to_array(unknown_array)
                |> Maybe.and_then(
                    fn (array) ->
                        Just(
                            fn (x) -> fn (y) -> fn (z) -> { 
                                x = x,
                                y = y,
                                z = z,
                            },
                        )
                        |> Maybe.apply(
                            Array.get(array, 0)
                            |> Maybe.and_then(Unknown.to_int),
                        )
                        |> Maybe.apply(
                            Array.get(array, 1)
                            |> Maybe.and_then(Unknown.to_string),
                        )
                        |> Maybe.apply(
                            Array.get(array, 2)
                            |> Maybe.and_then(Unknown.to_bool),
                        ),
                )
        in
        match result with
        | Just(_) -> Success("Unknown.to_object: noice")
        | Nothing -> Error("Unknown.to_object: oops")
        end,
    ]

unknown_to_object_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_object(dunno) with
            | Just(_) -> Success("Unknown.to_object: noice")
            | Nothing -> Error("Unknown.to_object: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_object(dunno) with
            | Just(_) -> Error("Unknown.to_object: huh")
            | Nothing -> Success("Unknown.to_object: noice")
            end
    in
    [
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_string),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_yeh(unknown_empty_object),
        test_yeh(unknown_object),
        test_nah(unknown_null),
        test_nah(unknown_undefined),
        -- make sure the empty object is actually empty
        match Unknown.to_object(unknown_empty_object) with
        | Just(obj) ->
            if
                StringMap.keys(obj)
                |> Array.is_empty
            then
                Success("Unknown.to_object: noice")
            else
                Error("Unknown.to_object: oops")
        | Nothing -> Error("Unknown.to_object: oops")
        end,
        -- More elaborate object decoding example
        let
            result: Maybe({ x: Int, y: Int, z: Unit }) =
                Unknown.to_object(unknown_object)
                |> Maybe.and_then(
                    fn (obj) ->
                        Just(
                            fn (x) -> fn (y) -> fn (z) -> { 
                                x = x,
                                y = y,
                                z = z,
                            },
                        )
                        |> Maybe.apply(
                            StringMap.get(obj, "a")
                            |> Maybe.and_then(Unknown.to_int),
                        )
                        |> Maybe.apply(
                            StringMap.get(obj, "b")
                            |> Maybe.and_then(Unknown.to_int),
                        )
                        |> Maybe.apply(
                            StringMap.get(obj, "4")
                            |> Maybe.and_then(Unknown.to_null)
                            |> Maybe.map(fn (_null) -> unit),
                        ),
                )
        in
        match result with
        | Just(_) -> Success("Unknown.to_object: noice")
        | Nothing -> Error("Unknown.to_object: oops")
        end,
    ]

unknown_to_null_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_null(dunno) with
            | Just(_) -> Success("Unknown.to_null: noice")
            | Nothing -> Error("Unknown.to_null: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_null(dunno) with
            | Just(_) -> Error("Unknown.to_null: huh")
            | Nothing -> Success("Unknown.to_null: noice")
            end
    in
    [
        test_nah(unknown_string),
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_yeh(unknown_null),
        test_nah(unknown_undefined),
    ]

unknown_to_undefined_tests: Array(TestResult) =
    let
        test_yeh = fn (dunno: Unknown): TestResult ->
            match Unknown.to_undefined(dunno) with
            | Just(_) -> Success("Unknown.to_undefined: noice")
            | Nothing -> Error("Unknown.to_undefined: oops")
            end

        test_nah = fn (dunno: Unknown): TestResult ->
            match Unknown.to_undefined(dunno) with
            | Just(_) -> Error("Unknown.to_undefined: huh")
            | Nothing -> Success("Unknown.to_undefined: noice")
            end
    in
    [
        test_nah(unknown_string),
        test_nah(unknown_int),
        test_nah(unknown_float),
        test_nah(unknown_true),
        test_nah(unknown_false),
        test_nah(unknown_empty_array),
        test_nah(unknown_array),
        test_nah(unknown_empty_object),
        test_nah(unknown_object),
        test_nah(unknown_null),
        test_yeh(unknown_undefined),
    ]

foreign unknown_string: Unknown

foreign unknown_int: Unknown

foreign unknown_float: Unknown

foreign unknown_true: Unknown

foreign unknown_false: Unknown

foreign unknown_empty_array: Unknown

foreign unknown_array: Unknown

foreign unknown_empty_object: Unknown

foreign unknown_object: Unknown

foreign unknown_null: Unknown

foreign unknown_undefined: Unknown
